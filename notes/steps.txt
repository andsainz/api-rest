REST: arquitectura de software

Pasos terminal:
1. npm init -Y
2. npm i express -E
3. node --watch api.js en scripts || nodemon

zod: herramienta para validar request
crypto: biblioteca nativa de node.js para crear universal unique identifier

app.use(express.json()) --> middleware que analiza y procesa las solicitudes HTTP en formato JSON
app.disable('x-powered-by') --> deshabilita el encabezado x-povered-by en las respuestas HTTP, oculta info sobre el servidor, mayor seguridad

CORS (Cross-Origin Resource Sharing) --> mecanismo de seguridad que restringe si ese recurso lo puedes utilizar en un origen. sólo funciona en el navegador
métodos normales: GET/HEAD/POST
métodos complejos: PUT/PATCH/DELETE
CORS pre-flight --> petición especial OPTIONS
app.use(cors()) --> middleware TODO

npx servor ./web

"type":"module" --> ESmodules

En commonJS las extensiones no son obligatorias porque node las resuelve internamente
en ESmodules SÍ es obligatorio
no se puede importar .json en EMmodules, lo interpreta como js
FORMA 1 DE IMPORTAR UN JSON A ESMODULES
import fs from 'node:fs' //importo filesystem de nodejs
const movies = JSON.parse(fs.readFileSync('/movies.json', 'uft-8')) //lee de forma síncrona el fichero .json y lo parsea a un json

FORMA 2 DE IMPORTAR UN JSON A ESMODULES
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url) //dirección del archivo actual
const movies = require('./movies.json')

si hay un async/await es NECESARIO manejar los errores try/catch
